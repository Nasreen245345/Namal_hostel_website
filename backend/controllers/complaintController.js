const Complaint = require('../models/Complaint');
const mongoose = require('mongoose');

// Mapping function to convert frontend complaint types to schema categories
const mapComplaintTypeToCategory = (complaintType) => {
  const typeMapping = {
    'plumbing_issues': 'maintenance',
    'electrical_problems': 'maintenance', 
    'furniture_damage': 'maintenance',
    'cleaning_services': 'cleanliness',
    'wifi_connectivity': 'wifi',
    'air_conditioning': 'maintenance',
    'noise_complaints': 'noise',
    'security_concerns': 'security',
    'roommate_issues': 'other',
    'others': 'other'
  };
  
  return typeMapping[complaintType] || 'other';
};

// @desc    Create a new complaint
// @route   POST /api/complaints
// @access  Public (can be protected later)
const createComplaint = async (req, res) => {
  try {
    console.log('Create complaint request body:', req.body);
    
    // Extract fields from request body and map them to schema fields
    const {
      studentName,
      studentId, // This is the string ID from form (like "NUM-BSCS-2022-10")
      email,     // Map this to studentEmail in schema
      phone,     // Map this to phoneNumber in schema
      roomNumber,
      complaintType, // Map this to category in schema
      priority,
      title,
      description,
      expectedResolutionDate
    } = req.body;

    // Create complaint object with correct field mapping
    const complaintData = {
      title,
      description,
      category: mapComplaintTypeToCategory(complaintType), // Convert to valid category
      priority: priority || 'medium',
      // For studentId, use the authenticated user's ObjectId if available, otherwise use a dummy ObjectId
      studentId: req.user?.id || new mongoose.Types.ObjectId(), 
      studentName,
      studentEmail: email, // Map email to studentEmail
      roomNumber,
      phoneNumber: phone, // Map phone to phoneNumber
      expectedResolutionDate: expectedResolutionDate ? new Date(expectedResolutionDate) : undefined
      // Note: complaintNumber will be auto-generated by the pre-save middleware
    };

    // Remove undefined fields
    Object.keys(complaintData).forEach(key => {
      if (complaintData[key] === undefined) {
        delete complaintData[key];
      }
    });

    console.log('Complaint data to be saved:', complaintData);

    // Generate complaint number before creating the document
    const complaintNumber = await Complaint.generateComplaintNumber();
    console.log('Generated complaint number:', complaintNumber);

    // Add complaint number to data
    complaintData.complaintNumber = complaintNumber;

    // Create and save complaint
    const complaint = new Complaint(complaintData);
    const savedComplaint = await complaint.save();

    console.log('Complaint created successfully:', {
      id: savedComplaint._id,
      complaintNumber: savedComplaint.complaintNumber
    });

    res.status(201).json({
      success: true,
      message: 'Complaint submitted successfully',
      data: {
        id: savedComplaint._id,
        complaintNumber: savedComplaint.complaintNumber, // Include complaint number in response
        studentName: savedComplaint.studentName,
        studentId: savedComplaint.studentId,
        title: savedComplaint.title,
        category: savedComplaint.category,
        priority: savedComplaint.priority,
        status: savedComplaint.status,
        createdAt: savedComplaint.createdAt
      }
    });

  } catch (error) {
    console.log('Create complaint error:', error);
    
    // Handle validation errors
    if (error.name === 'ValidationError') {
      const errors = {};
      Object.keys(error.errors).forEach(key => {
        errors[key] = error.errors[key].message;
      });
      
      return res.status(400).json({
        success: false,
        message: 'Validation failed',
        errors
      });
    }

    // Handle duplicate key errors (including complaint number)
    if (error.code === 11000) {
      let message = 'Duplicate entry detected';
      
      // Check if it's a complaint number duplicate
      if (error.message.includes('complaintNumber')) {
        message = 'Error generating unique complaint number. Please try again.';
      }
      
      return res.status(400).json({
        success: false,
        message,
        error: 'A complaint with similar details already exists'
      });
    }

    // Handle other errors
    res.status(500).json({
      success: false,
      message: 'Server error while creating complaint',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// @desc    Get all complaints
// @route   GET /api/complaints
// @access  Private (Admin)
const getAllComplaints = async (req, res) => {
  try {
    const { status, priority, category, page = 1, limit = 10, search } = req.query;
    
    // Build filter object
    const filter = {};
    if (status) filter.status = status;
    if (priority) filter.priority = priority;
    if (category) filter.category = category;
    
    // Add search functionality for complaint number, title, or student name
    if (search) {
      filter.$or = [
        { complaintNumber: { $regex: search, $options: 'i' } },
        { title: { $regex: search, $options: 'i' } },
        { studentName: { $regex: search, $options: 'i' } }
      ];
    }

    // Calculate pagination
    const skip = (page - 1) * limit;

    // Get complaints with pagination
    const complaints = await Complaint.find(filter)
      .populate('studentId', 'name email')
      .populate('resolvedBy', 'name')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    // Get total count for pagination
    const total = await Complaint.countDocuments(filter);

    res.status(200).json({
      success: true,
      count: complaints.length,
      total,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(total / limit)
      },
      data: complaints
    });

  } catch (error) {
    console.log('Get complaints error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching complaints',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// @desc    Get complaint by ID or complaint number
// @route   GET /api/complaints/:identifier
// @access  Private
const getComplaintById = async (req, res) => {
  try {
    const { identifier } = req.params;
    let complaint;

    // Check if identifier is a valid ObjectId
    if (mongoose.Types.ObjectId.isValid(identifier)) {
      complaint = await Complaint.findById(identifier)
        .populate('studentId', 'name email')
        .populate('resolvedBy', 'name');
    }
    
    // If not found or not a valid ObjectId, try to find by complaint number
    if (!complaint) {
      complaint = await Complaint.findOne({ complaintNumber: identifier })
        .populate('studentId', 'name email')
        .populate('resolvedBy', 'name');
    }

    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }

    res.status(200).json({
      success: true,
      data: complaint
    });

  } catch (error) {
    console.log('Get complaint by ID error:', error);
    
    res.status(500).json({
      success: false,
      message: 'Server error while fetching complaint',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// @desc    Get complaints by student ID
// @route   GET /api/complaints/student/:studentId
// @access  Private
const getComplaintsByStudent = async (req, res) => {
  try {
    const { studentId } = req.params;
    const { status, page = 1, limit = 10 } = req.query;

    // Build filter - studentId here should be the ObjectId
    const filter = { studentId };
    if (status) filter.status = status;

    // Calculate pagination
    const skip = (page - 1) * limit;

    // Get complaints
    const complaints = await Complaint.find(filter)
      .populate('resolvedBy', 'name')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    // Get total count
    const total = await Complaint.countDocuments(filter);

    res.status(200).json({
      success: true,
      count: complaints.length,
      total,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(total / limit)
      },
      data: complaints
    });

  } catch (error) {
    console.log('Get student complaints error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching student complaints',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// @desc    Update complaint status
// @route   PUT /api/complaints/:id/status
// @access  Private (Admin)
const updateComplaintStatus = async (req, res) => {
  try {
    const { status, adminResponse } = req.body;
    
    const complaint = await Complaint.findById(req.params.id);
    
    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }

    // Update fields
    if (status) complaint.status = status;
    if (adminResponse) complaint.adminResponse = adminResponse;

    // If resolving, set resolution date and admin
    if (status === 'resolved' && !complaint.resolvedAt) {
      complaint.resolvedAt = new Date();
      complaint.resolvedBy = req.user?.id;
    }

    const updatedComplaint = await complaint.save();

    res.status(200).json({
      success: true,
      message: 'Complaint status updated successfully',
      data: updatedComplaint
    });

  } catch (error) {
    console.log('Update complaint status error:', error);
    
    if (error.name === 'ValidationError') {
      const errors = {};
      Object.keys(error.errors).forEach(key => {
        errors[key] = error.errors[key].message;
      });
      
      return res.status(400).json({
        success: false,
        message: 'Validation failed',
        errors
      });
    }

    res.status(500).json({
      success: false,
      message: 'Server error while updating complaint status',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// @desc    Delete complaint
// @route   DELETE /api/complaints/:id
// @access  Private (Admin)
const deleteComplaint = async (req, res) => {
  try {
    const complaint = await Complaint.findById(req.params.id);

    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }

    await complaint.deleteOne();

    res.status(200).json({
      success: true,
      message: 'Complaint deleted successfully'
    });

  } catch (error) {
    console.log('Delete complaint error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while deleting complaint',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// @desc    Get complaint statistics
// @route   GET /api/complaints/stats
// @access  Private (Admin)
const getComplaintStats = async (req, res) => {
  try {
    const stats = await Complaint.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: 1 },
          pending: { $sum: { $cond: [{ $eq: ['$status', 'pending'] }, 1, 0] } },
          inProgress: { $sum: { $cond: [{ $eq: ['$status', 'in-progress'] }, 1, 0] } },
          resolved: { $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] } },
          rejected: { $sum: { $cond: [{ $eq: ['$status', 'rejected'] }, 1, 0] } },
          highPriority: { $sum: { $cond: [{ $eq: ['$priority', 'high'] }, 1, 0] } },
          urgentPriority: { $sum: { $cond: [{ $eq: ['$priority', 'urgent'] }, 1, 0] } }
        }
      }
    ]);

    // Get complaints by category
    const complaintsByCategory = await Complaint.aggregate([
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]);

    res.status(200).json({
      success: true,
      data: {
        overview: stats[0] || {
          total: 0,
          pending: 0,
          inProgress: 0,
          resolved: 0,
          rejected: 0,
          highPriority: 0,
          urgentPriority: 0
        },
        complaintsByCategory
      }
    });

  } catch (error) {
    console.log('Get complaint stats error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error while fetching complaint statistics',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

module.exports = {
  createComplaint,
  getAllComplaints,
  getComplaintById,
  getComplaintsByStudent,
  updateComplaintStatus,
  deleteComplaint,
  getComplaintStats
};